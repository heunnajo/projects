/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.87
 * Generated at: 2023-05-01 23:49:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.PrintWriter;
import dti.DtiDAO;
import java.sql.*;
import java.util.*;

public final class dtiInvoiceAction_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("dti.DtiDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 request.setCharacterEncoding("UTF-8"); 
      out.write('\r');
      out.write('\n');
      dti.Dti dti = null;
      dti = (dti.Dti) _jspx_page_context.getAttribute("dti", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (dti == null){
        dti = new dti.Dti();
        _jspx_page_context.setAttribute("dti", dti, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>JSP 게시판 웹 사이트</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

		String conversationID = (String) request.getParameter("conversationID");
		String supBuyType = (String) request.getParameter("supBuyType");
		String direction = (String) request.getParameter("direction");
		String dtiDate = (String) request.getParameter("dtiDate");
		String dtiType = (String) request.getParameter("dtiType");
		String taxDemand = (String) request.getParameter("taxDemand");
		String supComRegno = (String) request.getParameter("supComRegno");
		String supRepName = (String) request.getParameter("supRepName");
		String supComName = (String) request.getParameter("supComName");
		String supComAddr = (String) request.getParameter("supComAddr");
		String byrComRegno = (String) request.getParameter("byrComRegno");
		String byrRepName = (String) request.getParameter("byrRepName");
		String byrComName = (String) request.getParameter("byrComName");
		String byrComAddr = (String) request.getParameter("byrComAddr");
		String byrEmail = (String) request.getParameter("byrEmail");
		String supAmount = (String) request.getParameter("supAmount");
		String taxAmount = (String) request.getParameter("taxAmount");
		String totalAmount = (String) request.getParameter("totalAmount");
		String DttYn = (String) request.getParameter("DttYn");
		String amendCode = (String) request.getParameter("amendCode");
		String oriIssueId = (String) request.getParameter("oriIssueId");
		
		//데이터 확인
		if(conversationID == null) {//유효하지 않은 경우
			PrintWriter script = response.getWriter();
			script.println("<script>");
			script.println("alert('해당 관리번호는 유효하지 않습니다.')");
			script.println("location.href = 'dtiInvoice.jsp'");
			script.println("</script>");
		} else{//유효한 경우
			if(conversationID == null || supBuyType == null || direction == null){
				PrintWriter script = response.getWriter();
				script.println("<script>");
				script.println("alert('입력이 안된 사항이 있습니다.')");
				script.println("history.back()");
				script.println("</script>");
			} else{//실제 DB로 등록함.
				DtiDAO dtiDAO = new DtiDAO();
				int result = dtiDAO.write(conversationID, supBuyType, direction, dtiDate, dtiType,
						taxDemand, supComRegno, supRepName, supComName, supComAddr,
						byrComRegno, byrRepName, byrComName, byrComAddr, byrEmail,
						supAmount, taxAmount, totalAmount, DttYn, amendCode, oriIssueId);
				if(result == -1){
					PrintWriter script = response.getWriter();
					script.println("<script>");
					script.println("alert(세금계산서 발행에 실패했습니다.')");
					script.println("history.back()");
					script.println("</script>");
				} else {//db 저장 성공
					PrintWriter script = response.getWriter();
					script.println("<script>");
					script.println("alert(세금계산서 발행에 성공했습니다.')");
					script.println("location.href = 'dtiInvoice.jsp'");
					script.println("</script>");
				} 
			}
			
		}
		
      out.write("\r\n");
      out.write("	<!--\r\n");
      out.write("	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("		var conversationID = document.getElementsByName(\"conversationID\").value[0];\r\n");
      out.write("		var supBuyType = document.getElementsByName(\"supBuyType\").value;\r\n");
      out.write("		var direction = document.getElementsByName(\"direction\").value;\r\n");
      out.write("		var dtiDate = document.getElementsByName(\"dtiDate\").value;\r\n");
      out.write("		var dtiType = document.getElementsByName(\"dtiType\").value;\r\n");
      out.write("		var taxDemand = document.getElementsByName(\"taxDemand\").value;\r\n");
      out.write("		var supComRegno = document.getElementsByName(\"supComRegno\").value;\r\n");
      out.write("		var supRepName = document.getElementsByName(\"supRepName\").value;\r\n");
      out.write("		var supComName = document.getElementsByName(\"supComName\").value;\r\n");
      out.write("		var supComAddr = document.getElementsByName(\"supComAddr\").value;\r\n");
      out.write("		var byrComRegno = document.getElementsByName(\"byrComRegno\").value;\r\n");
      out.write("		var byrRepName = document.getElementsByName(\"byrRepName\").value;\r\n");
      out.write("		var byrComName = document.getElementsByName(\"byrComName\").value;\r\n");
      out.write("		var byrComAddr = document.getElementsByName(\"byrComAddr\").value;\r\n");
      out.write("		var byrEmail = document.getElementsByName(\"byrEmail\").value;\r\n");
      out.write("		var supAmount = document.getElementsByName(\"supAmount\").value;\r\n");
      out.write("		var taxAmount = document.getElementsByName(\"taxAmount\").value;\r\n");
      out.write("		var totalAmount = document.getElementsByName(\"totalAmount\").value;\r\n");
      out.write("		var DttYn = document.getElementsByName(\"DttYn\").value;\r\n");
      out.write("		var amendCode = document.getElementsByName(\"amendCode\").value;\r\n");
      out.write("		var oriIssueId = document.getElementsByName(\"oriIssueId\").value;\r\n");
      out.write("		\r\n");
      out.write("		console.log('conversationID'+conversationID);\r\n");
      out.write("	</script>\r\n");
      out.write("	-->\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
